import { ConfigParams } from 'pip-services3-commons-node';
import { IConfigurable } from 'pip-services3-commons-node';
import { IReferences } from 'pip-services3-commons-node';
import { IReferenceable } from 'pip-services3-commons-node';
import { ICommandable } from 'pip-services3-commons-node';
import { CommandSet } from 'pip-services3-commons-node';
import { IOpenable } from 'pip-services3-commons-node';
import { CurrentObjectStateV1 } from 'iqs-clients-currobjectstates-node';
import { RosterV1 } from 'iqs-clients-rosters-node';
import { StateUpdateV1 } from '../data/version1/StateUpdateV1';
import { IStateUpdatesController } from './IStateUpdatesController';
export declare class StateUpdatesController implements IStateUpdatesController, IConfigurable, IReferenceable, ICommandable, IOpenable {
    private _logger;
    private _counters;
    private _dependencyResolver;
    private _dependencies;
    private _commandSet;
    private _offlineCheckTimer;
    private _dumpCacheTimer;
    private _jobQueue;
    private _offlineCheckInterval;
    private _dumpCacheInterval;
    private _offlineProcessing;
    private _maxQueueJobs;
    private _maxSpeed;
    private _stateManager;
    private _dataManager;
    private _sensorDataManager;
    private _zoneCalculator;
    private _deviceStatesRecorder;
    private _positionsRecorder;
    private _dataRecorder;
    private _historicalStatesRecorder;
    private _statisticsRecorder;
    private _attendanceRecorder;
    private _rosterManager;
    private _eventGenerator;
    configure(config: ConfigParams): void;
    setReferences(references: IReferences): void;
    getCommandSet(): CommandSet;
    isOpen(): boolean;
    open(correlationId: string, callback: (err: any) => void): void;
    close(correlationId: string, callback: (err: any) => void): void;
    private fixStateUpdate;
    private handleAsyncCallback;
    private executeUpdateState;
    beginUpdateState(correlationId: string, stateUpdate: StateUpdateV1, callback: (err: any) => void): void;
    updateState(correlationId: string, stateUpdate: StateUpdateV1, callback: (err: any, state: CurrentObjectStateV1) => void): void;
    updateOfflineStates(correlationId: string, roster: RosterV1, callback: (err: any) => void): void;
    offlineCheck(callback?: (err: any) => void): void;
    dumpCache(callback?: (err: any) => void): void;
}
